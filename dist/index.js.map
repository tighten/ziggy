{"version":3,"file":"index.js","sources":["../src/js/Route.js","../src/js/Router.js","../src/js/index.js"],"sourcesContent":["/**\n * A Laravel route. This class represents one route and its configuration and metadata.\n */\nexport default class Route {\n    /**\n     * @param {String} name - Route name.\n     * @param {Object} definition - Route definition.\n     * @param {Object} config - Ziggy configuration.\n     */\n    constructor(name, definition, config) {\n        this.name = name;\n        this.definition = definition;\n        this.bindings = definition.bindings ?? {};\n        this.config = { absolute: true, ...config };\n    }\n\n    /**\n     * Get a 'template' of the complete URL for this route.\n     *\n     * @example\n     * https://{team}.ziggy.dev/user/{user}\n     *\n     * @return {String} Route template.\n     */\n    get template() {\n        // If  we're building just a path there's no origin, otherwise: if this route has a\n        // domain configured we construct the origin with that, if not we use the app URL\n        const origin = !this.config.absolute ? '' : this.definition.domain\n            ? `${this.config.url.match(/^\\w+:\\/\\//)[0]}${this.definition.domain}${this.config.port ? `:${this.config.port}` : ''}`\n            : this.config.url;\n\n        return `${origin}/${this.definition.uri}`;\n    }\n\n    /**\n     * Get an array of objects representing the parameters that this route accepts.\n     *\n     * @example\n     * [{ name: 'team', required: true }, { name: 'user', required: false }]\n     *\n     * @return {Array} Parameter segments.\n     */\n    get parameterSegments() {\n        return this.template.match(/{[^}?]+\\??}/g)?.map((segment) => ({\n            name: segment.replace(/{|\\??}/g, ''),\n            required: !/\\?}$/.test(segment),\n        })) ?? [];\n    }\n\n    /**\n     * Get whether this route's template matches the given URL.\n     *\n     * @param {String} url - URL to check.\n     * @return {Boolean} Whether this route matches.\n     */\n    matchesUrl(url) {\n        if (!this.definition.methods.includes('GET')) return false;\n\n        // Transform the route's template into a regex that will match a hydrated URL,\n        // by replacing its parameter segments with matchers for parameter values\n        const pattern = this.template\n            .replace(/\\/{[^}?]*\\?}/g, '(\\/[^/?]+)?')\n            .replace(/{[^}]+}/g, '[^/?]+')\n            .replace(/^\\w+:\\/\\//, '');\n\n        return new RegExp(`^${pattern}$`).test(url.replace(/\\/+$/, '').split('?').shift());\n    }\n\n    /**\n     * Hydrate and return a complete URL for this route with the given parameters.\n     *\n     * @param {Object} params\n     * @return {String}\n     */\n    compile(params) {\n        if (!this.parameterSegments.length) return this.template.replace(/\\/+$/, '');\n\n        return this.template.replace(/{([^}?]+)\\??}/g, (_, segment) => {\n            // If the parameter is missing but is not optional, throw an error\n            if ([null, undefined].includes(params[segment]) && this.parameterSegments.find(({ name }) => name === segment).required) {\n                throw new Error(`Ziggy error: '${segment}' parameter is required for route '${this.name}'.`)\n            }\n\n            return encodeURIComponent(params[segment] ?? '');\n        }).replace(/\\/+$/, '');\n    }\n}\n","import { parse, stringify } from 'qs';\nimport Route from './Route';\n\n/**\n * A collection of Laravel routes. This class constitutes Ziggy's main API.\n */\nexport default class Router extends String {\n    /**\n     * @param {String} name - Route name.\n     * @param {(String|Number|Array|Object)} params - Route parameters.\n     * @param {Boolean} absolute - Whether to include the URL origin.\n     * @param {Object} config - Ziggy configuration.\n     */\n    constructor(name, params, absolute = true, config) {\n        super();\n\n        this._config = config ?? Ziggy ?? globalThis?.Ziggy;\n\n        if (name) {\n            if (!this._config.routes[name]) {\n                throw new Error(`Ziggy error: route '${name}' is not in the route list.`);\n            }\n\n            this._route = new Route(name, this._config.routes[name], { ...this._config, absolute });\n            this._params = this._parse(params);\n        }\n    }\n\n    /**\n     * Get the compiled URL string for the current route and parameters.\n     *\n     * @example\n     * // with 'posts.show' route 'posts/{post}'\n     * (new Router('posts.show', 1)).toString(); // 'https://ziggy.dev/posts/1'\n     *\n     * @return {String}\n     */\n    toString() {\n        // Get parameters that don't correspond to any route segments to append them to the query\n        const unhandled = Object.keys(this._params)\n            .filter((key) => !this._route.parameterSegments.some(({ name }) => name === key))\n            .filter((key) => key !== '_query')\n            .reduce((result, current) => ({ ...result, [current]: this._params[current] }), {});\n\n        return this._route.compile(this._params) + stringify({ ...unhandled, ...this._params['_query'] }, {\n            addQueryPrefix: true,\n            arrayFormat: 'indices',\n            encodeValuesOnly: true,\n            skipNulls: true,\n        });\n    }\n\n    /**\n     * Get the name of the route matching the current window URL, or, given a route name\n     * and parameters, check if the current window URL and parameters match that route.\n     *\n     * @example\n     * // at URL https://ziggy.dev/posts/4 with 'posts.show' route 'posts/{post}'\n     * route().current(); // 'posts.show'\n     * route().current('posts.index'); // false\n     * route().current('posts.show'); // true\n     * route().current('posts.show', { post: 1 }); // false\n     * route().current('posts.show', { post: 4 }); // true\n     *\n     * @param {String} name - Route name to check.\n     * @param {(String|Number|Array|Object)} params - Route parameters.\n     * @return {(Boolean|String)}\n     */\n    current(name, params) {\n        const url = window.location.host + window.location.pathname;\n\n        // Find the first route that matches the current URL\n        const [current, route] = Object.entries(this._config.routes).find(\n            ([_, route]) => new Route(name, route, this._config).matchesUrl(url)\n        );\n\n        // If a name wasn't passed, return the name of the current route\n        if (!name) return current;\n\n        // Test the passed name against the current route, matching some\n        // basic wildcards, e.g. passing `events.*` matches `events.show`\n        const match = new RegExp(`^${name.replace('.', '\\\\.').replace('*', '.*')}$`).test(current);\n\n        if (!params) return match;\n\n        params = this._parse(params, new Route(current, route, this._config));\n\n        // Check that all passed parameters match their values in the current window URL\n        return Object.entries(this._dehydrate(route))\n            .filter(([key]) => params.hasOwnProperty(key))\n            // Use weak equality because all values in the current window URL will be strings\n            .every(([key, value]) => params[key] == value);\n    }\n\n    /**\n     * Get all parameter values from the current window URL.\n     *\n     * @example\n     * // at URL https://tighten.ziggy.dev/posts/4?lang=en with 'posts.show' route 'posts/{post}' and domain '{team}.ziggy.dev'\n     * route().params; // { team: 'tighten', post: 4, lang: 'en' }\n     *\n     * @return {Object}\n     */\n    get params() {\n        return this._dehydrate(this._config.routes[this.current()]);\n    }\n\n    /**\n     * Check whether the given route exists.\n     *\n     * @param {String} name\n     * @return {Boolean}\n     */\n    has(name) {\n        return Object.keys(this._config.routes).includes(name);\n    }\n\n    /**\n     * Parse Laravel-style route parameters of any type into a normalized object.\n     *\n     * @example\n     * // with route parameter names 'event' and 'venue'\n     * _parse(1); // { event: 1 }\n     * _parse({ event: 2, venue: 3 }); // { event: 2, venue: 3 }\n     * _parse(['Taylor', 'Matt']); // { event: 'Taylor', venue: 'Matt' }\n     * _parse([4, { uuid: 56789, name: 'Grand Canyon' }]); // { event: 4, venue: 56789 }\n     *\n     * @param {(String|Number|Array|Object)} params - Route parameters.\n     * @param {Route} route - Route instance.\n     * @return {Object} Normalized complete route parameters.\n     */\n    _parse(params = {}, route = this._route) {\n        // If `params` is a string or integer, wrap it in an array\n        params = ['string', 'number'].includes(typeof params) ? [params] : params;\n\n        // Separate segments with and without defaults, and fill in the default values\n        const segments = route.parameterSegments.filter(({ name }) => !this._config.defaults[name]);\n\n        if (Array.isArray(params)) {\n            // If the parameters are an array they have to be in order, so we can transform them into\n            // an object by keying them with the template segment names in the order they appear\n            params = params.reduce((result, current, i) => ({ ...result, [segments[i].name]: current }), {});\n        } else if (\n            segments.length === 1\n            && !params[segments[0].name]\n            && (params.hasOwnProperty(Object.values(route.bindings)[0]) || params.hasOwnProperty('id'))\n        ) {\n            // If there is only one template segment and `params` is an object, that object is\n            // ambiguousâ€”it could contain the parameter key and value, or it could be an object\n            // representing just the value (e.g. a model); we can inspect it to find out, and\n            // if it's just the parameter value, we can wrap it in an object with its key\n            params = { [segments[0].name]: params };\n        }\n\n        return {\n            ...this._defaults(route),\n            ...this._substituteBindings(params, route.bindings),\n        };\n    }\n\n    /**\n     * Populate default parameters for the given route.\n     *\n     * @example\n     * // with default parameters { locale: 'en', country: 'US' } and 'posts.show' route '{locale}/posts/{post}'\n     * defaults(...); // { locale: 'en' }\n     *\n     * @param {Route} route\n     * @return {Object} Default route parameters.\n     */\n    _defaults(route) {\n        return route.parameterSegments.filter(({ name }) => this._config.defaults[name])\n            .reduce((result, { name }, i) => ({ ...result, [name]: this._config.defaults[name] }), {});\n    }\n\n    /**\n     * Substitute Laravel route model bindings in the given parameters.\n     *\n     * @example\n     * _substituteBindings({ post: { id: 4, slug: 'hello-world', title: 'Hello, world!' } }, { post: 'slug' }); // { post: 'hello-world' }\n     *\n     * @param {Object} params - Route parameters.\n     * @param {Object} bindings - Route model bindings.\n     * @return {Object} Normalized route parameters.\n     */\n    _substituteBindings(params, bindings = {}) {\n        return Object.entries(params).reduce((result, [key, value]) => {\n            // If the value isn't an object, or if it's an object of explicity query\n            // parameters, there's nothing to substitute so we return it as-is\n            if (!value || typeof value !== 'object' || Array.isArray(value) || key === '_query') {\n                return { ...result, [key]: value };\n            }\n\n            if (!value.hasOwnProperty(bindings[key])) {\n                if (value.hasOwnProperty('id')) {\n                    // As a fallback, we still accept an 'id' key not explicitly registered as a binding\n                    bindings[key] = 'id';\n                } else {\n                    throw new Error(`Ziggy error: object passed as '${key}' parameter is missing route model binding key '${bindings[key]}'.`)\n                }\n            }\n\n            return { ...result, [key]: value[bindings[key]] };\n        }, {});\n    }\n\n    /**\n     * Get all parameters and their values from the current window URL, based on the given route definition.\n     *\n     * @example\n     * // at URL https://tighten.ziggy.dev/events/8/venues/chicago?zoom=true\n     * _dehydrate({ domain: '{team}.ziggy.dev', uri: 'events/{event}/venues/{venue?}' }); // { team: 'tighten', event: 8, venue: 'chicago', zoom: true }\n     *\n     * @param {Object} route - Route definition.\n     * @return {Object} Parameters.\n     */\n    _dehydrate(route) {\n        let pathname = window.location.pathname\n            // If this Laravel app is in a subdirectory, trim the subdirectory from the path\n            .replace(this._config.url.replace(/^\\w*:\\/\\/[^/]+/, ''), '')\n            .replace(/^\\/+/, '');\n\n        // Given part of a valid 'hydrated' URL containing all its parameter values,\n        // a route template, and a delimiter, extract the parameters as an object\n        // E.g. dehydrate('events/{event}/{venue}', 'events/2/chicago', '/'); // { event: 2, venue: 'chicago' }\n        const dehydrate = (hydrated, template = '', delimiter) => {\n            const [values, segments] = [hydrated, template].map(s => s.split(delimiter));\n\n            return segments.reduce((result, current, i) => {\n                // Only include template segments that are route parameters\n                // AND have a value present in the passed hydrated string\n                return /^{[^}?]+\\??}$/.test(current) && values[i]\n                    ? { ...result, [current.replace(/^{|\\??}$/g, '')]: values[i] }\n                    : result;\n            }, {});\n        }\n\n        return {\n            ...dehydrate(window.location.host, route.domain, '.'), // Domain parameters\n            ...dehydrate(pathname, route.uri, '/'), // Path parameters\n            ...parse(window.location.search?.replace(/^\\?/, '')), // Query parameters\n        };\n    }\n\n    valueOf() {\n        return this.toString();\n    }\n\n    /**\n     * @deprecated since v1.0, use `has()` instead.\n     */\n    check(name) {\n        return this.has(name);\n    }\n}\n","import Router from './Router';\n\nexport default function route(name, params, absolute, config) {\n    const router = new Router(name, params, absolute, config);\n\n    return name ? router.toString() : router;\n}\n"],"names":["Route","constructor","name","definition","config","this","bindings","absolute","template","domain","url","match","port","uri","parameterSegments","_this$template$match","map","segment","replace","required","test","matchesUrl","methods","includes","pattern","RegExp","split","shift","compile","params","length","_","undefined","find","Error","encodeURIComponent","Router","String","super","_config","Ziggy","globalThis","routes","_route","_params","_parse","toString","unhandled","Object","keys","filter","key","some","reduce","result","current","[object Object]","stringify","addQueryPrefix","arrayFormat","encodeValuesOnly","skipNulls","window","location","host","pathname","route","entries","_dehydrate","hasOwnProperty","every","value","has","segments","defaults","Array","isArray","i","values","_defaults","_substituteBindings","dehydrate","hydrated","delimiter","s","parse","search","_window$location$sear","valueOf","check","router"],"mappings":"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"}